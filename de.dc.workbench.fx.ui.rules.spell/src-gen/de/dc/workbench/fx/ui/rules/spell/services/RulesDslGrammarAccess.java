/*
 * generated by Xtext 2.25.0
 */
package de.dc.workbench.fx.ui.rules.spell.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RulesDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class RulesManagerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.dc.workbench.fx.ui.rules.spell.RulesDsl.RulesManager");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRulesManagerAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cImportsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cImportsUriParserRuleCall_1_0_0 = (RuleCall)cImportsAssignment_1_0.eContents().get(0);
		private final Assignment cImportsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cImportsUriParserRuleCall_1_1_0 = (RuleCall)cImportsAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cRulesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cRulesRuleParserRuleCall_2_0_0 = (RuleCall)cRulesAssignment_2_0.eContents().get(0);
		private final Assignment cRulesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRulesRuleParserRuleCall_2_1_0 = (RuleCall)cRulesAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cOutputsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cOutputsOutputParserRuleCall_3_0_0 = (RuleCall)cOutputsAssignment_3_0.eContents().get(0);
		private final Assignment cOutputsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOutputsOutputParserRuleCall_3_1_0 = (RuleCall)cOutputsAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cRuleSetAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cRuleSetRuleSetParserRuleCall_4_0_0 = (RuleCall)cRuleSetAssignment_4_0.eContents().get(0);
		private final Assignment cRuleSetAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cRuleSetRuleSetParserRuleCall_4_1_0 = (RuleCall)cRuleSetAssignment_4_1.eContents().get(0);
		
		//RulesManager returns RulesManager:
		//    {RulesManager}
		//    (imports+=Uri (imports+=Uri)*)?
		//    (rules+=Rule (rules+=Rule)*)?
		//    (outputs+=Output (outputs+=Output)*)?
		//    (ruleSet+=RuleSet (ruleSet+=RuleSet)*)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{RulesManager}
		//(imports+=Uri (imports+=Uri)*)?
		//(rules+=Rule (rules+=Rule)*)?
		//(outputs+=Output (outputs+=Output)*)?
		//(ruleSet+=RuleSet (ruleSet+=RuleSet)*)?
		public Group getGroup() { return cGroup; }
		
		//{RulesManager}
		public Action getRulesManagerAction_0() { return cRulesManagerAction_0; }
		
		//(imports+=Uri (imports+=Uri)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//imports+=Uri
		public Assignment getImportsAssignment_1_0() { return cImportsAssignment_1_0; }
		
		//Uri
		public RuleCall getImportsUriParserRuleCall_1_0_0() { return cImportsUriParserRuleCall_1_0_0; }
		
		//(imports+=Uri)*
		public Assignment getImportsAssignment_1_1() { return cImportsAssignment_1_1; }
		
		//Uri
		public RuleCall getImportsUriParserRuleCall_1_1_0() { return cImportsUriParserRuleCall_1_1_0; }
		
		//(rules+=Rule (rules+=Rule)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//rules+=Rule
		public Assignment getRulesAssignment_2_0() { return cRulesAssignment_2_0; }
		
		//Rule
		public RuleCall getRulesRuleParserRuleCall_2_0_0() { return cRulesRuleParserRuleCall_2_0_0; }
		
		//(rules+=Rule)*
		public Assignment getRulesAssignment_2_1() { return cRulesAssignment_2_1; }
		
		//Rule
		public RuleCall getRulesRuleParserRuleCall_2_1_0() { return cRulesRuleParserRuleCall_2_1_0; }
		
		//(outputs+=Output (outputs+=Output)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//outputs+=Output
		public Assignment getOutputsAssignment_3_0() { return cOutputsAssignment_3_0; }
		
		//Output
		public RuleCall getOutputsOutputParserRuleCall_3_0_0() { return cOutputsOutputParserRuleCall_3_0_0; }
		
		//(outputs+=Output)*
		public Assignment getOutputsAssignment_3_1() { return cOutputsAssignment_3_1; }
		
		//Output
		public RuleCall getOutputsOutputParserRuleCall_3_1_0() { return cOutputsOutputParserRuleCall_3_1_0; }
		
		//(ruleSet+=RuleSet (ruleSet+=RuleSet)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//ruleSet+=RuleSet
		public Assignment getRuleSetAssignment_4_0() { return cRuleSetAssignment_4_0; }
		
		//RuleSet
		public RuleCall getRuleSetRuleSetParserRuleCall_4_0_0() { return cRuleSetRuleSetParserRuleCall_4_0_0; }
		
		//(ruleSet+=RuleSet)*
		public Assignment getRuleSetAssignment_4_1() { return cRuleSetAssignment_4_1; }
		
		//RuleSet
		public RuleCall getRuleSetRuleSetParserRuleCall_4_1_0() { return cRuleSetRuleSetParserRuleCall_4_1_0; }
	}
	public class UriElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.dc.workbench.fx.ui.rules.spell.RulesDsl.Uri");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUriAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cURIKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUriAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUriEStringParserRuleCall_2_0 = (RuleCall)cUriAssignment_2.eContents().get(0);
		private final Keyword cASKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameEStringParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		
		//Uri returns Uri:
		//    {Uri}
		//    'URI' uri=EString 'AS' name=EString
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Uri}
		//'URI' uri=EString 'AS' name=EString
		public Group getGroup() { return cGroup; }
		
		//{Uri}
		public Action getUriAction_0() { return cUriAction_0; }
		
		//'URI'
		public Keyword getURIKeyword_1() { return cURIKeyword_1; }
		
		//uri=EString
		public Assignment getUriAssignment_2() { return cUriAssignment_2; }
		
		//EString
		public RuleCall getUriEStringParserRuleCall_2_0() { return cUriEStringParserRuleCall_2_0; }
		
		//'AS'
		public Keyword getASKeyword_3() { return cASKeyword_3; }
		
		//name=EString
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_4_0() { return cNameEStringParserRuleCall_4_0; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.dc.workbench.fx.ui.rules.spell.RulesDsl.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRULEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cInputKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cConditionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConditionConditionEnumRuleCall_5_0 = (RuleCall)cConditionAssignment_5.eContents().get(0);
		private final Assignment cPatternAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPatternEStringParserRuleCall_6_0 = (RuleCall)cPatternAssignment_6.eContents().get(0);
		
		//Rule returns Rule:
		//    {Rule}
		//    'RULE' name=EString '->' 'input' condition=Condition pattern=EString
		////    '('
		////        ('category' ':' category=EString ',')?
		////        ('description' ':' description=EString ',')?
		////        ('condition' ':' condition=Condition ',')?
		////        ('pattern' ':' pattern=EString)?
		////    ')'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Rule}
		//'RULE' name=EString '->' 'input' condition=Condition pattern=EString
		public Group getGroup() { return cGroup; }
		
		//{Rule}
		public Action getRuleAction_0() { return cRuleAction_0; }
		
		//'RULE'
		public Keyword getRULEKeyword_1() { return cRULEKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//'input'
		public Keyword getInputKeyword_4() { return cInputKeyword_4; }
		
		//condition=Condition
		public Assignment getConditionAssignment_5() { return cConditionAssignment_5; }
		
		//Condition
		public RuleCall getConditionConditionEnumRuleCall_5_0() { return cConditionConditionEnumRuleCall_5_0; }
		
		//pattern=EString
		public Assignment getPatternAssignment_6() { return cPatternAssignment_6; }
		
		//EString
		public RuleCall getPatternEStringParserRuleCall_6_0() { return cPatternEStringParserRuleCall_6_0; }
	}
	public class RuleSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.dc.workbench.fx.ui.rules.spell.RulesDsl.RuleSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRuleSetAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRULESETKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cWHENKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRulesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cRulesRuleCrossReference_3_1_0 = (CrossReference)cRulesAssignment_3_1.eContents().get(0);
		private final RuleCall cRulesRuleEStringParserRuleCall_3_1_0_1 = (RuleCall)cRulesRuleCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cANDKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cRulesAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final CrossReference cRulesRuleCrossReference_3_2_1_0 = (CrossReference)cRulesAssignment_3_2_1.eContents().get(0);
		private final RuleCall cRulesRuleEStringParserRuleCall_3_2_1_0_1 = (RuleCall)cRulesRuleCrossReference_3_2_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTHENKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOutputAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cOutputOutputCrossReference_4_1_0 = (CrossReference)cOutputAssignment_4_1.eContents().get(0);
		private final RuleCall cOutputOutputEStringParserRuleCall_4_1_0_1 = (RuleCall)cOutputOutputCrossReference_4_1_0.eContents().get(1);
		private final Keyword cENDKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//RuleSet returns RuleSet:
		//    {RuleSet}
		//    'RULESET' name=EString
		//        ( 'WHEN' rules+=[Rule|EString] ( "AND" rules+=[Rule|EString])* )?
		//        ('THEN' output=[Output|EString])?
		//    'END';
		@Override public ParserRule getRule() { return rule; }
		
		//{RuleSet}
		//'RULESET' name=EString
		//    ( 'WHEN' rules+=[Rule|EString] ( "AND" rules+=[Rule|EString])* )?
		//    ('THEN' output=[Output|EString])?
		//'END'
		public Group getGroup() { return cGroup; }
		
		//{RuleSet}
		public Action getRuleSetAction_0() { return cRuleSetAction_0; }
		
		//'RULESET'
		public Keyword getRULESETKeyword_1() { return cRULESETKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//( 'WHEN' rules+=[Rule|EString] ( "AND" rules+=[Rule|EString])* )?
		public Group getGroup_3() { return cGroup_3; }
		
		//'WHEN'
		public Keyword getWHENKeyword_3_0() { return cWHENKeyword_3_0; }
		
		//rules+=[Rule|EString]
		public Assignment getRulesAssignment_3_1() { return cRulesAssignment_3_1; }
		
		//[Rule|EString]
		public CrossReference getRulesRuleCrossReference_3_1_0() { return cRulesRuleCrossReference_3_1_0; }
		
		//EString
		public RuleCall getRulesRuleEStringParserRuleCall_3_1_0_1() { return cRulesRuleEStringParserRuleCall_3_1_0_1; }
		
		//( "AND" rules+=[Rule|EString])*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//"AND"
		public Keyword getANDKeyword_3_2_0() { return cANDKeyword_3_2_0; }
		
		//rules+=[Rule|EString]
		public Assignment getRulesAssignment_3_2_1() { return cRulesAssignment_3_2_1; }
		
		//[Rule|EString]
		public CrossReference getRulesRuleCrossReference_3_2_1_0() { return cRulesRuleCrossReference_3_2_1_0; }
		
		//EString
		public RuleCall getRulesRuleEStringParserRuleCall_3_2_1_0_1() { return cRulesRuleEStringParserRuleCall_3_2_1_0_1; }
		
		//('THEN' output=[Output|EString])?
		public Group getGroup_4() { return cGroup_4; }
		
		//'THEN'
		public Keyword getTHENKeyword_4_0() { return cTHENKeyword_4_0; }
		
		//output=[Output|EString]
		public Assignment getOutputAssignment_4_1() { return cOutputAssignment_4_1; }
		
		//[Output|EString]
		public CrossReference getOutputOutputCrossReference_4_1_0() { return cOutputOutputCrossReference_4_1_0; }
		
		//EString
		public RuleCall getOutputOutputEStringParserRuleCall_4_1_0_1() { return cOutputOutputEStringParserRuleCall_4_1_0_1; }
		
		//'END'
		public Keyword getENDKeyword_5() { return cENDKeyword_5; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.dc.workbench.fx.ui.rules.spell.RulesDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.dc.workbench.fx.ui.rules.spell.RulesDsl.Input");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInputAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueEStringParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Input returns Input:
		//    {Input}
		//    (value=EString)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Input}
		//(value=EString)?
		public Group getGroup() { return cGroup; }
		
		//{Input}
		public Action getInputAction_0() { return cInputAction_0; }
		
		//(value=EString)?
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//EString
		public RuleCall getValueEStringParserRuleCall_1_0() { return cValueEStringParserRuleCall_1_0; }
	}
	public class OutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.dc.workbench.fx.ui.rules.spell.RulesDsl.Output");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOutputAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOUTPUTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cValueKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cColonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cValueAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cValueEStringParserRuleCall_4_2_0 = (RuleCall)cValueAssignment_4_2.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cModelKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cColonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cModelAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final CrossReference cModelUriCrossReference_5_2_0 = (CrossReference)cModelAssignment_5_2.eContents().get(0);
		private final RuleCall cModelUriEStringParserRuleCall_5_2_0_1 = (RuleCall)cModelUriCrossReference_5_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cMapperKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cColonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cMapperAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final CrossReference cMapperUriCrossReference_6_2_0 = (CrossReference)cMapperAssignment_6_2.eContents().get(0);
		private final RuleCall cMapperUriEStringParserRuleCall_6_2_0_1 = (RuleCall)cMapperUriCrossReference_6_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cLeftCurlyBracketKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Group cGroup_8_1 = (Group)cGroup_8.eContents().get(1);
		private final Assignment cFieldsAssignment_8_1_0 = (Assignment)cGroup_8_1.eContents().get(0);
		private final RuleCall cFieldsOutputFieldParserRuleCall_8_1_0_0 = (RuleCall)cFieldsAssignment_8_1_0.eContents().get(0);
		private final Assignment cFieldsAssignment_8_1_1 = (Assignment)cGroup_8_1.eContents().get(1);
		private final RuleCall cFieldsOutputFieldParserRuleCall_8_1_1_0 = (RuleCall)cFieldsAssignment_8_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		
		//Output returns Output:
		//    {Output}
		//    'OUTPUT' name=EString '('
		//        ('value' ':' value=EString )?
		//        ('model' ':' model=[Uri|EString] ',')?
		//        ('mapper' ':' mapper=[Uri|EString])?
		//    ')' ( '{'
		//        (fields+=OutputField ( fields+=OutputField)*)?
		//    '}' )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Output}
		//'OUTPUT' name=EString '('
		//    ('value' ':' value=EString )?
		//    ('model' ':' model=[Uri|EString] ',')?
		//    ('mapper' ':' mapper=[Uri|EString])?
		//')' ( '{'
		//    (fields+=OutputField ( fields+=OutputField)*)?
		//'}' )?
		public Group getGroup() { return cGroup; }
		
		//{Output}
		public Action getOutputAction_0() { return cOutputAction_0; }
		
		//'OUTPUT'
		public Keyword getOUTPUTKeyword_1() { return cOUTPUTKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//('value' ':' value=EString )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'value'
		public Keyword getValueKeyword_4_0() { return cValueKeyword_4_0; }
		
		//':'
		public Keyword getColonKeyword_4_1() { return cColonKeyword_4_1; }
		
		//value=EString
		public Assignment getValueAssignment_4_2() { return cValueAssignment_4_2; }
		
		//EString
		public RuleCall getValueEStringParserRuleCall_4_2_0() { return cValueEStringParserRuleCall_4_2_0; }
		
		//('model' ':' model=[Uri|EString] ',')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'model'
		public Keyword getModelKeyword_5_0() { return cModelKeyword_5_0; }
		
		//':'
		public Keyword getColonKeyword_5_1() { return cColonKeyword_5_1; }
		
		//model=[Uri|EString]
		public Assignment getModelAssignment_5_2() { return cModelAssignment_5_2; }
		
		//[Uri|EString]
		public CrossReference getModelUriCrossReference_5_2_0() { return cModelUriCrossReference_5_2_0; }
		
		//EString
		public RuleCall getModelUriEStringParserRuleCall_5_2_0_1() { return cModelUriEStringParserRuleCall_5_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_5_3() { return cCommaKeyword_5_3; }
		
		//('mapper' ':' mapper=[Uri|EString])?
		public Group getGroup_6() { return cGroup_6; }
		
		//'mapper'
		public Keyword getMapperKeyword_6_0() { return cMapperKeyword_6_0; }
		
		//':'
		public Keyword getColonKeyword_6_1() { return cColonKeyword_6_1; }
		
		//mapper=[Uri|EString]
		public Assignment getMapperAssignment_6_2() { return cMapperAssignment_6_2; }
		
		//[Uri|EString]
		public CrossReference getMapperUriCrossReference_6_2_0() { return cMapperUriCrossReference_6_2_0; }
		
		//EString
		public RuleCall getMapperUriEStringParserRuleCall_6_2_0_1() { return cMapperUriEStringParserRuleCall_6_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//( '{'
		//       (fields+=OutputField ( fields+=OutputField)*)?
		//   '}' )?
		public Group getGroup_8() { return cGroup_8; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8_0() { return cLeftCurlyBracketKeyword_8_0; }
		
		//(fields+=OutputField ( fields+=OutputField)*)?
		public Group getGroup_8_1() { return cGroup_8_1; }
		
		//fields+=OutputField
		public Assignment getFieldsAssignment_8_1_0() { return cFieldsAssignment_8_1_0; }
		
		//OutputField
		public RuleCall getFieldsOutputFieldParserRuleCall_8_1_0_0() { return cFieldsOutputFieldParserRuleCall_8_1_0_0; }
		
		//( fields+=OutputField)*
		public Assignment getFieldsAssignment_8_1_1() { return cFieldsAssignment_8_1_1; }
		
		//OutputField
		public RuleCall getFieldsOutputFieldParserRuleCall_8_1_1_0() { return cFieldsOutputFieldParserRuleCall_8_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8_2() { return cRightCurlyBracketKeyword_8_2; }
	}
	public class OutputFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.dc.workbench.fx.ui.rules.spell.RulesDsl.OutputField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOutputFieldAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueEStringParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//OutputField returns OutputField:
		//    {OutputField}
		//    name=EString '=' value=EString
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{OutputField}
		//name=EString '=' value=EString
		public Group getGroup() { return cGroup; }
		
		//{OutputField}
		public Action getOutputFieldAction_0() { return cOutputFieldAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//value=EString
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//EString
		public RuleCall getValueEStringParserRuleCall_3_0() { return cValueEStringParserRuleCall_3_0; }
	}
	
	public class ConditionElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.dc.workbench.fx.ui.rules.spell.RulesDsl.Condition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQUALSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQUALSEqualsSignKeyword_0_0 = (Keyword)cEQUALSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEQUALS_IGNORE_CASEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEQUALS_IGNORE_CASEEQUALS_IGNORE_CASEKeyword_1_0 = (Keyword)cEQUALS_IGNORE_CASEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCONTAINSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCONTAINSCONTAINSKeyword_2_0 = (Keyword)cCONTAINSEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCOTNAINS_IGNORE_CASEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCOTNAINS_IGNORE_CASECOTNAINS_IGNORE_CASEKeyword_3_0 = (Keyword)cCOTNAINS_IGNORE_CASEEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGREATER_THANEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGREATER_THANGREATER_THANKeyword_4_0 = (Keyword)cGREATER_THANEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cGREATER_THAN_EQUALSEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cGREATER_THAN_EQUALSGREATER_THAN_EQUALSKeyword_5_0 = (Keyword)cGREATER_THAN_EQUALSEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cSMALL_THANEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cSMALL_THANSMALL_THANKeyword_6_0 = (Keyword)cSMALL_THANEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cSMALL_THAN_EQUALSEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cSMALL_THAN_EQUALSSMALL_THAN_EQUALSKeyword_7_0 = (Keyword)cSMALL_THAN_EQUALSEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cSTART_WITHEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cSTART_WITHSTART_WITHKeyword_8_0 = (Keyword)cSTART_WITHEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cSTART_IGNORE_CASE_WITHEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cSTART_IGNORE_CASE_WITHSTART_IGNORE_CASE_WITHKeyword_9_0 = (Keyword)cSTART_IGNORE_CASE_WITHEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cEND_WITHEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cEND_WITHEND_WITHKeyword_10_0 = (Keyword)cEND_WITHEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cEND_IGNORE_CASE_WITHEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cEND_IGNORE_CASE_WITHEND_IGNORE_CASE_WITHKeyword_11_0 = (Keyword)cEND_IGNORE_CASE_WITHEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cORORKeyword_12_0 = (Keyword)cOREnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cANDANDKeyword_13_0 = (Keyword)cANDEnumLiteralDeclaration_13.eContents().get(0);
		
		//enum Condition returns Condition:
		//                EQUALS = '=' | EQUALS_IGNORE_CASE = 'EQUALS_IGNORE_CASE' | CONTAINS = 'CONTAINS' | COTNAINS_IGNORE_CASE = 'COTNAINS_IGNORE_CASE' | GREATER_THAN = 'GREATER_THAN' | GREATER_THAN_EQUALS = 'GREATER_THAN_EQUALS' | SMALL_THAN = 'SMALL_THAN' | SMALL_THAN_EQUALS = 'SMALL_THAN_EQUALS' | START_WITH = 'START_WITH' | START_IGNORE_CASE_WITH = 'START_IGNORE_CASE_WITH' | END_WITH = 'END_WITH' | END_IGNORE_CASE_WITH = 'END_IGNORE_CASE_WITH' | OR = 'OR' | AND = 'AND';
		public EnumRule getRule() { return rule; }
		
		//EQUALS = '=' | EQUALS_IGNORE_CASE = 'EQUALS_IGNORE_CASE' | CONTAINS = 'CONTAINS' | COTNAINS_IGNORE_CASE = 'COTNAINS_IGNORE_CASE' | GREATER_THAN = 'GREATER_THAN' | GREATER_THAN_EQUALS = 'GREATER_THAN_EQUALS' | SMALL_THAN = 'SMALL_THAN' | SMALL_THAN_EQUALS = 'SMALL_THAN_EQUALS' | START_WITH = 'START_WITH' | START_IGNORE_CASE_WITH = 'START_IGNORE_CASE_WITH' | END_WITH = 'END_WITH' | END_IGNORE_CASE_WITH = 'END_IGNORE_CASE_WITH' | OR = 'OR' | AND = 'AND'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EQUALS = '='
		public EnumLiteralDeclaration getEQUALSEnumLiteralDeclaration_0() { return cEQUALSEnumLiteralDeclaration_0; }
		
		//'='
		public Keyword getEQUALSEqualsSignKeyword_0_0() { return cEQUALSEqualsSignKeyword_0_0; }
		
		//EQUALS_IGNORE_CASE = 'EQUALS_IGNORE_CASE'
		public EnumLiteralDeclaration getEQUALS_IGNORE_CASEEnumLiteralDeclaration_1() { return cEQUALS_IGNORE_CASEEnumLiteralDeclaration_1; }
		
		//'EQUALS_IGNORE_CASE'
		public Keyword getEQUALS_IGNORE_CASEEQUALS_IGNORE_CASEKeyword_1_0() { return cEQUALS_IGNORE_CASEEQUALS_IGNORE_CASEKeyword_1_0; }
		
		//CONTAINS = 'CONTAINS'
		public EnumLiteralDeclaration getCONTAINSEnumLiteralDeclaration_2() { return cCONTAINSEnumLiteralDeclaration_2; }
		
		//'CONTAINS'
		public Keyword getCONTAINSCONTAINSKeyword_2_0() { return cCONTAINSCONTAINSKeyword_2_0; }
		
		//COTNAINS_IGNORE_CASE = 'COTNAINS_IGNORE_CASE'
		public EnumLiteralDeclaration getCOTNAINS_IGNORE_CASEEnumLiteralDeclaration_3() { return cCOTNAINS_IGNORE_CASEEnumLiteralDeclaration_3; }
		
		//'COTNAINS_IGNORE_CASE'
		public Keyword getCOTNAINS_IGNORE_CASECOTNAINS_IGNORE_CASEKeyword_3_0() { return cCOTNAINS_IGNORE_CASECOTNAINS_IGNORE_CASEKeyword_3_0; }
		
		//GREATER_THAN = 'GREATER_THAN'
		public EnumLiteralDeclaration getGREATER_THANEnumLiteralDeclaration_4() { return cGREATER_THANEnumLiteralDeclaration_4; }
		
		//'GREATER_THAN'
		public Keyword getGREATER_THANGREATER_THANKeyword_4_0() { return cGREATER_THANGREATER_THANKeyword_4_0; }
		
		//GREATER_THAN_EQUALS = 'GREATER_THAN_EQUALS'
		public EnumLiteralDeclaration getGREATER_THAN_EQUALSEnumLiteralDeclaration_5() { return cGREATER_THAN_EQUALSEnumLiteralDeclaration_5; }
		
		//'GREATER_THAN_EQUALS'
		public Keyword getGREATER_THAN_EQUALSGREATER_THAN_EQUALSKeyword_5_0() { return cGREATER_THAN_EQUALSGREATER_THAN_EQUALSKeyword_5_0; }
		
		//SMALL_THAN = 'SMALL_THAN'
		public EnumLiteralDeclaration getSMALL_THANEnumLiteralDeclaration_6() { return cSMALL_THANEnumLiteralDeclaration_6; }
		
		//'SMALL_THAN'
		public Keyword getSMALL_THANSMALL_THANKeyword_6_0() { return cSMALL_THANSMALL_THANKeyword_6_0; }
		
		//SMALL_THAN_EQUALS = 'SMALL_THAN_EQUALS'
		public EnumLiteralDeclaration getSMALL_THAN_EQUALSEnumLiteralDeclaration_7() { return cSMALL_THAN_EQUALSEnumLiteralDeclaration_7; }
		
		//'SMALL_THAN_EQUALS'
		public Keyword getSMALL_THAN_EQUALSSMALL_THAN_EQUALSKeyword_7_0() { return cSMALL_THAN_EQUALSSMALL_THAN_EQUALSKeyword_7_0; }
		
		//START_WITH = 'START_WITH'
		public EnumLiteralDeclaration getSTART_WITHEnumLiteralDeclaration_8() { return cSTART_WITHEnumLiteralDeclaration_8; }
		
		//'START_WITH'
		public Keyword getSTART_WITHSTART_WITHKeyword_8_0() { return cSTART_WITHSTART_WITHKeyword_8_0; }
		
		//START_IGNORE_CASE_WITH = 'START_IGNORE_CASE_WITH'
		public EnumLiteralDeclaration getSTART_IGNORE_CASE_WITHEnumLiteralDeclaration_9() { return cSTART_IGNORE_CASE_WITHEnumLiteralDeclaration_9; }
		
		//'START_IGNORE_CASE_WITH'
		public Keyword getSTART_IGNORE_CASE_WITHSTART_IGNORE_CASE_WITHKeyword_9_0() { return cSTART_IGNORE_CASE_WITHSTART_IGNORE_CASE_WITHKeyword_9_0; }
		
		//END_WITH = 'END_WITH'
		public EnumLiteralDeclaration getEND_WITHEnumLiteralDeclaration_10() { return cEND_WITHEnumLiteralDeclaration_10; }
		
		//'END_WITH'
		public Keyword getEND_WITHEND_WITHKeyword_10_0() { return cEND_WITHEND_WITHKeyword_10_0; }
		
		//END_IGNORE_CASE_WITH = 'END_IGNORE_CASE_WITH'
		public EnumLiteralDeclaration getEND_IGNORE_CASE_WITHEnumLiteralDeclaration_11() { return cEND_IGNORE_CASE_WITHEnumLiteralDeclaration_11; }
		
		//'END_IGNORE_CASE_WITH'
		public Keyword getEND_IGNORE_CASE_WITHEND_IGNORE_CASE_WITHKeyword_11_0() { return cEND_IGNORE_CASE_WITHEND_IGNORE_CASE_WITHKeyword_11_0; }
		
		//OR = 'OR'
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_12() { return cOREnumLiteralDeclaration_12; }
		
		//'OR'
		public Keyword getORORKeyword_12_0() { return cORORKeyword_12_0; }
		
		//AND = 'AND'
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_13() { return cANDEnumLiteralDeclaration_13; }
		
		//'AND'
		public Keyword getANDANDKeyword_13_0() { return cANDANDKeyword_13_0; }
	}
	
	private final RulesManagerElements pRulesManager;
	private final UriElements pUri;
	private final RuleElements pRule;
	private final RuleSetElements pRuleSet;
	private final EStringElements pEString;
	private final ConditionElements eCondition;
	private final InputElements pInput;
	private final OutputElements pOutput;
	private final OutputFieldElements pOutputField;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RulesDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRulesManager = new RulesManagerElements();
		this.pUri = new UriElements();
		this.pRule = new RuleElements();
		this.pRuleSet = new RuleSetElements();
		this.pEString = new EStringElements();
		this.eCondition = new ConditionElements();
		this.pInput = new InputElements();
		this.pOutput = new OutputElements();
		this.pOutputField = new OutputFieldElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.dc.workbench.fx.ui.rules.spell.RulesDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//RulesManager returns RulesManager:
	//    {RulesManager}
	//    (imports+=Uri (imports+=Uri)*)?
	//    (rules+=Rule (rules+=Rule)*)?
	//    (outputs+=Output (outputs+=Output)*)?
	//    (ruleSet+=RuleSet (ruleSet+=RuleSet)*)?
	//;
	public RulesManagerElements getRulesManagerAccess() {
		return pRulesManager;
	}
	
	public ParserRule getRulesManagerRule() {
		return getRulesManagerAccess().getRule();
	}
	
	//Uri returns Uri:
	//    {Uri}
	//    'URI' uri=EString 'AS' name=EString
	//;
	public UriElements getUriAccess() {
		return pUri;
	}
	
	public ParserRule getUriRule() {
		return getUriAccess().getRule();
	}
	
	//Rule returns Rule:
	//    {Rule}
	//    'RULE' name=EString '->' 'input' condition=Condition pattern=EString
	////    '('
	////        ('category' ':' category=EString ',')?
	////        ('description' ':' description=EString ',')?
	////        ('condition' ':' condition=Condition ',')?
	////        ('pattern' ':' pattern=EString)?
	////    ')'
	//    ;
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//RuleSet returns RuleSet:
	//    {RuleSet}
	//    'RULESET' name=EString
	//        ( 'WHEN' rules+=[Rule|EString] ( "AND" rules+=[Rule|EString])* )?
	//        ('THEN' output=[Output|EString])?
	//    'END';
	public RuleSetElements getRuleSetAccess() {
		return pRuleSet;
	}
	
	public ParserRule getRuleSetRule() {
		return getRuleSetAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//enum Condition returns Condition:
	//                EQUALS = '=' | EQUALS_IGNORE_CASE = 'EQUALS_IGNORE_CASE' | CONTAINS = 'CONTAINS' | COTNAINS_IGNORE_CASE = 'COTNAINS_IGNORE_CASE' | GREATER_THAN = 'GREATER_THAN' | GREATER_THAN_EQUALS = 'GREATER_THAN_EQUALS' | SMALL_THAN = 'SMALL_THAN' | SMALL_THAN_EQUALS = 'SMALL_THAN_EQUALS' | START_WITH = 'START_WITH' | START_IGNORE_CASE_WITH = 'START_IGNORE_CASE_WITH' | END_WITH = 'END_WITH' | END_IGNORE_CASE_WITH = 'END_IGNORE_CASE_WITH' | OR = 'OR' | AND = 'AND';
	public ConditionElements getConditionAccess() {
		return eCondition;
	}
	
	public EnumRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//Input returns Input:
	//    {Input}
	//    (value=EString)?;
	public InputElements getInputAccess() {
		return pInput;
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}
	
	//Output returns Output:
	//    {Output}
	//    'OUTPUT' name=EString '('
	//        ('value' ':' value=EString )?
	//        ('model' ':' model=[Uri|EString] ',')?
	//        ('mapper' ':' mapper=[Uri|EString])?
	//    ')' ( '{'
	//        (fields+=OutputField ( fields+=OutputField)*)?
	//    '}' )?
	//;
	public OutputElements getOutputAccess() {
		return pOutput;
	}
	
	public ParserRule getOutputRule() {
		return getOutputAccess().getRule();
	}
	
	//OutputField returns OutputField:
	//    {OutputField}
	//    name=EString '=' value=EString
	//;
	public OutputFieldElements getOutputFieldAccess() {
		return pOutputField;
	}
	
	public ParserRule getOutputFieldRule() {
		return getOutputFieldAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
