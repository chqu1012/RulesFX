/*
 * generated by Xtext 2.25.0
 */
grammar InternalRulesDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package de.dc.workbench.fx.ui.rules.spell.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.dc.workbench.fx.ui.rules.spell.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.dc.workbench.fx.ui.rules.spell.services.RulesDslGrammarAccess;

}

@parser::members {

 	private RulesDslGrammarAccess grammarAccess;

    public InternalRulesDslParser(TokenStream input, RulesDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "RulesManager";
   	}

   	@Override
   	protected RulesDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleRulesManager
entryRuleRulesManager returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRulesManagerRule()); }
	iv_ruleRulesManager=ruleRulesManager
	{ $current=$iv_ruleRulesManager.current; }
	EOF;

// Rule RulesManager
ruleRulesManager returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRulesManagerAccess().getRulesManagerAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getRulesManagerAccess().getImportsUriParserRuleCall_1_0_0());
					}
					lv_imports_1_0=ruleUri
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRulesManagerRule());
						}
						add(
							$current,
							"imports",
							lv_imports_1_0,
							"de.dc.workbench.fx.ui.rules.spell.RulesDsl.Uri");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRulesManagerAccess().getImportsUriParserRuleCall_1_1_0());
					}
					lv_imports_2_0=ruleUri
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRulesManagerRule());
						}
						add(
							$current,
							"imports",
							lv_imports_2_0,
							"de.dc.workbench.fx.ui.rules.spell.RulesDsl.Uri");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getRulesManagerAccess().getRulesRuleParserRuleCall_2_0_0());
					}
					lv_rules_3_0=ruleRule
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRulesManagerRule());
						}
						add(
							$current,
							"rules",
							lv_rules_3_0,
							"de.dc.workbench.fx.ui.rules.spell.RulesDsl.Rule");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRulesManagerAccess().getRulesRuleParserRuleCall_2_1_0());
					}
					lv_rules_4_0=ruleRule
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRulesManagerRule());
						}
						add(
							$current,
							"rules",
							lv_rules_4_0,
							"de.dc.workbench.fx.ui.rules.spell.RulesDsl.Rule");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getRulesManagerAccess().getOutputsOutputParserRuleCall_3_0_0());
					}
					lv_outputs_5_0=ruleOutput
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRulesManagerRule());
						}
						add(
							$current,
							"outputs",
							lv_outputs_5_0,
							"de.dc.workbench.fx.ui.rules.spell.RulesDsl.Output");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRulesManagerAccess().getOutputsOutputParserRuleCall_3_1_0());
					}
					lv_outputs_6_0=ruleOutput
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRulesManagerRule());
						}
						add(
							$current,
							"outputs",
							lv_outputs_6_0,
							"de.dc.workbench.fx.ui.rules.spell.RulesDsl.Output");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getRulesManagerAccess().getRuleSetRuleSetParserRuleCall_4_0_0());
					}
					lv_ruleSet_7_0=ruleRuleSet
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRulesManagerRule());
						}
						add(
							$current,
							"ruleSet",
							lv_ruleSet_7_0,
							"de.dc.workbench.fx.ui.rules.spell.RulesDsl.RuleSet");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRulesManagerAccess().getRuleSetRuleSetParserRuleCall_4_1_0());
					}
					lv_ruleSet_8_0=ruleRuleSet
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRulesManagerRule());
						}
						add(
							$current,
							"ruleSet",
							lv_ruleSet_8_0,
							"de.dc.workbench.fx.ui.rules.spell.RulesDsl.RuleSet");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
	)
;

// Entry rule entryRuleUri
entryRuleUri returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUriRule()); }
	iv_ruleUri=ruleUri
	{ $current=$iv_ruleUri.current; }
	EOF;

// Rule Uri
ruleUri returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getUriAccess().getUriAction_0(),
					$current);
			}
		)
		otherlv_1='URI'
		{
			newLeafNode(otherlv_1, grammarAccess.getUriAccess().getURIKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUriAccess().getUriEStringParserRuleCall_2_0());
				}
				lv_uri_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUriRule());
					}
					set(
						$current,
						"uri",
						lv_uri_2_0,
						"de.dc.workbench.fx.ui.rules.spell.RulesDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='AS'
		{
			newLeafNode(otherlv_3, grammarAccess.getUriAccess().getASKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUriAccess().getNameEStringParserRuleCall_4_0());
				}
				lv_name_4_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUriRule());
					}
					set(
						$current,
						"name",
						lv_name_4_0,
						"de.dc.workbench.fx.ui.rules.spell.RulesDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	iv_ruleRule=ruleRule
	{ $current=$iv_ruleRule.current; }
	EOF;

// Rule Rule
ruleRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRuleAccess().getRuleAction_0(),
					$current);
			}
		)
		otherlv_1='RULE'
		{
			newLeafNode(otherlv_1, grammarAccess.getRuleAccess().getRULEKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"de.dc.workbench.fx.ui.rules.spell.RulesDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='->'
		{
			newLeafNode(otherlv_3, grammarAccess.getRuleAccess().getHyphenMinusGreaterThanSignKeyword_3());
		}
		otherlv_4='input'
		{
			newLeafNode(otherlv_4, grammarAccess.getRuleAccess().getInputKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getConditionConditionEnumRuleCall_5_0());
				}
				lv_condition_5_0=ruleCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"condition",
						lv_condition_5_0,
						"de.dc.workbench.fx.ui.rules.spell.RulesDsl.Condition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getPatternEStringParserRuleCall_6_0());
				}
				lv_pattern_6_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"pattern",
						lv_pattern_6_0,
						"de.dc.workbench.fx.ui.rules.spell.RulesDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRuleSet
entryRuleRuleSet returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleSetRule()); }
	iv_ruleRuleSet=ruleRuleSet
	{ $current=$iv_ruleRuleSet.current; }
	EOF;

// Rule RuleSet
ruleRuleSet returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRuleSetAccess().getRuleSetAction_0(),
					$current);
			}
		)
		otherlv_1='RULESET'
		{
			newLeafNode(otherlv_1, grammarAccess.getRuleSetAccess().getRULESETKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleSetAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleSetRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"de.dc.workbench.fx.ui.rules.spell.RulesDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='WHEN'
			{
				newLeafNode(otherlv_3, grammarAccess.getRuleSetAccess().getWHENKeyword_3_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRuleSetRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getRuleSetAccess().getRulesRuleCrossReference_3_1_0());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5='AND'
				{
					newLeafNode(otherlv_5, grammarAccess.getRuleSetAccess().getANDKeyword_3_2_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getRuleSetRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getRuleSetAccess().getRulesRuleCrossReference_3_2_1_0());
						}
						ruleEString
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_7='THEN'
			{
				newLeafNode(otherlv_7, grammarAccess.getRuleSetAccess().getTHENKeyword_4_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRuleSetRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getRuleSetAccess().getOutputOutputCrossReference_4_1_0());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_9='END'
		{
			newLeafNode(otherlv_9, grammarAccess.getRuleSetAccess().getENDKeyword_5());
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleOutput
entryRuleOutput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOutputRule()); }
	iv_ruleOutput=ruleOutput
	{ $current=$iv_ruleOutput.current; }
	EOF;

// Rule Output
ruleOutput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getOutputAccess().getOutputAction_0(),
					$current);
			}
		)
		otherlv_1='OUTPUT'
		{
			newLeafNode(otherlv_1, grammarAccess.getOutputAccess().getOUTPUTKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOutputAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOutputRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"de.dc.workbench.fx.ui.rules.spell.RulesDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getOutputAccess().getLeftParenthesisKeyword_3());
		}
		(
			otherlv_4='value'
			{
				newLeafNode(otherlv_4, grammarAccess.getOutputAccess().getValueKeyword_4_0());
			}
			otherlv_5=':'
			{
				newLeafNode(otherlv_5, grammarAccess.getOutputAccess().getColonKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOutputAccess().getValueEStringParserRuleCall_4_2_0());
					}
					lv_value_6_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOutputRule());
						}
						set(
							$current,
							"value",
							lv_value_6_0,
							"de.dc.workbench.fx.ui.rules.spell.RulesDsl.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_7='model'
			{
				newLeafNode(otherlv_7, grammarAccess.getOutputAccess().getModelKeyword_5_0());
			}
			otherlv_8=':'
			{
				newLeafNode(otherlv_8, grammarAccess.getOutputAccess().getColonKeyword_5_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOutputRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getOutputAccess().getModelUriCrossReference_5_2_0());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_10=','
			{
				newLeafNode(otherlv_10, grammarAccess.getOutputAccess().getCommaKeyword_5_3());
			}
		)?
		(
			otherlv_11='mapper'
			{
				newLeafNode(otherlv_11, grammarAccess.getOutputAccess().getMapperKeyword_6_0());
			}
			otherlv_12=':'
			{
				newLeafNode(otherlv_12, grammarAccess.getOutputAccess().getColonKeyword_6_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOutputRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getOutputAccess().getMapperUriCrossReference_6_2_0());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_14=')'
		{
			newLeafNode(otherlv_14, grammarAccess.getOutputAccess().getRightParenthesisKeyword_7());
		}
		(
			otherlv_15='{'
			{
				newLeafNode(otherlv_15, grammarAccess.getOutputAccess().getLeftCurlyBracketKeyword_8_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getOutputAccess().getFieldsOutputFieldParserRuleCall_8_1_0_0());
						}
						lv_fields_16_0=ruleOutputField
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getOutputRule());
							}
							add(
								$current,
								"fields",
								lv_fields_16_0,
								"de.dc.workbench.fx.ui.rules.spell.RulesDsl.OutputField");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getOutputAccess().getFieldsOutputFieldParserRuleCall_8_1_1_0());
						}
						lv_fields_17_0=ruleOutputField
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getOutputRule());
							}
							add(
								$current,
								"fields",
								lv_fields_17_0,
								"de.dc.workbench.fx.ui.rules.spell.RulesDsl.OutputField");
							afterParserOrEnumRuleCall();
						}
					)
				)*
			)?
			otherlv_18='}'
			{
				newLeafNode(otherlv_18, grammarAccess.getOutputAccess().getRightCurlyBracketKeyword_8_2());
			}
		)?
	)
;

// Entry rule entryRuleOutputField
entryRuleOutputField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOutputFieldRule()); }
	iv_ruleOutputField=ruleOutputField
	{ $current=$iv_ruleOutputField.current; }
	EOF;

// Rule OutputField
ruleOutputField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getOutputFieldAccess().getOutputFieldAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getOutputFieldAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOutputFieldRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"de.dc.workbench.fx.ui.rules.spell.RulesDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getOutputFieldAccess().getEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOutputFieldAccess().getValueEStringParserRuleCall_3_0());
				}
				lv_value_3_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOutputFieldRule());
					}
					set(
						$current,
						"value",
						lv_value_3_0,
						"de.dc.workbench.fx.ui.rules.spell.RulesDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Rule Condition
ruleCondition returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='='
			{
				$current = grammarAccess.getConditionAccess().getEQUALSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getConditionAccess().getEQUALSEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='EQUALS_IGNORE_CASE'
			{
				$current = grammarAccess.getConditionAccess().getEQUALS_IGNORE_CASEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getConditionAccess().getEQUALS_IGNORE_CASEEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='CONTAINS'
			{
				$current = grammarAccess.getConditionAccess().getCONTAINSEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getConditionAccess().getCONTAINSEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='COTNAINS_IGNORE_CASE'
			{
				$current = grammarAccess.getConditionAccess().getCOTNAINS_IGNORE_CASEEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getConditionAccess().getCOTNAINS_IGNORE_CASEEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='GREATER_THAN'
			{
				$current = grammarAccess.getConditionAccess().getGREATER_THANEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getConditionAccess().getGREATER_THANEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='GREATER_THAN_EQUALS'
			{
				$current = grammarAccess.getConditionAccess().getGREATER_THAN_EQUALSEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getConditionAccess().getGREATER_THAN_EQUALSEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='SMALL_THAN'
			{
				$current = grammarAccess.getConditionAccess().getSMALL_THANEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getConditionAccess().getSMALL_THANEnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='SMALL_THAN_EQUALS'
			{
				$current = grammarAccess.getConditionAccess().getSMALL_THAN_EQUALSEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getConditionAccess().getSMALL_THAN_EQUALSEnumLiteralDeclaration_7());
			}
		)
		    |
		(
			enumLiteral_8='START_WITH'
			{
				$current = grammarAccess.getConditionAccess().getSTART_WITHEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_8, grammarAccess.getConditionAccess().getSTART_WITHEnumLiteralDeclaration_8());
			}
		)
		    |
		(
			enumLiteral_9='START_IGNORE_CASE_WITH'
			{
				$current = grammarAccess.getConditionAccess().getSTART_IGNORE_CASE_WITHEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_9, grammarAccess.getConditionAccess().getSTART_IGNORE_CASE_WITHEnumLiteralDeclaration_9());
			}
		)
		    |
		(
			enumLiteral_10='END_WITH'
			{
				$current = grammarAccess.getConditionAccess().getEND_WITHEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_10, grammarAccess.getConditionAccess().getEND_WITHEnumLiteralDeclaration_10());
			}
		)
		    |
		(
			enumLiteral_11='END_IGNORE_CASE_WITH'
			{
				$current = grammarAccess.getConditionAccess().getEND_IGNORE_CASE_WITHEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_11, grammarAccess.getConditionAccess().getEND_IGNORE_CASE_WITHEnumLiteralDeclaration_11());
			}
		)
		    |
		(
			enumLiteral_12='OR'
			{
				$current = grammarAccess.getConditionAccess().getOREnumLiteralDeclaration_12().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_12, grammarAccess.getConditionAccess().getOREnumLiteralDeclaration_12());
			}
		)
		    |
		(
			enumLiteral_13='AND'
			{
				$current = grammarAccess.getConditionAccess().getANDEnumLiteralDeclaration_13().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_13, grammarAccess.getConditionAccess().getANDEnumLiteralDeclaration_13());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
