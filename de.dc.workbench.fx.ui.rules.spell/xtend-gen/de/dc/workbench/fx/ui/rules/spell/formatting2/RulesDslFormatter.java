/**
 * generated by Xtext 2.25.0
 */
package de.dc.workbench.fx.ui.rules.spell.formatting2;

import com.google.inject.Inject;
import de.dc.workbench.fx.ui.rules.Input;
import de.dc.workbench.fx.ui.rules.Output;
import de.dc.workbench.fx.ui.rules.Rule;
import de.dc.workbench.fx.ui.rules.RuleSet;
import de.dc.workbench.fx.ui.rules.RulesManager;
import de.dc.workbench.fx.ui.rules.spell.services.RulesDslGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class RulesDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private RulesDslGrammarAccess _rulesDslGrammarAccess;
  
  protected void _format(final RulesManager rulesManager, @Extension final IFormattableDocument document) {
    EList<Rule> _rules = rulesManager.getRules();
    for (final Rule rule : _rules) {
      document.<Rule>format(rule);
    }
    EList<RuleSet> _ruleSet = rulesManager.getRuleSet();
    for (final RuleSet ruleSet : _ruleSet) {
      document.<RuleSet>format(ruleSet);
    }
  }
  
  protected void _format(final RuleSet ruleSet, @Extension final IFormattableDocument document) {
    document.<Input>format(ruleSet.getInput());
    document.<Output>format(ruleSet.getOutput());
  }
  
  public void format(final Object ruleSet, final IFormattableDocument document) {
    if (ruleSet instanceof XtextResource) {
      _format((XtextResource)ruleSet, document);
      return;
    } else if (ruleSet instanceof RuleSet) {
      _format((RuleSet)ruleSet, document);
      return;
    } else if (ruleSet instanceof RulesManager) {
      _format((RulesManager)ruleSet, document);
      return;
    } else if (ruleSet instanceof EObject) {
      _format((EObject)ruleSet, document);
      return;
    } else if (ruleSet == null) {
      _format((Void)null, document);
      return;
    } else if (ruleSet != null) {
      _format(ruleSet, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(ruleSet, document).toString());
    }
  }
}
